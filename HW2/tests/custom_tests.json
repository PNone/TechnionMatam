{
  "templates": {
    "hw2": ":::testName::: > :::out:::",
    "hw2Error": ":::testName::: 2> :::out:::",
    "hw2OutAndError": ":::testName::: 2>&1 > :::out:::"
  },
  "tests": [
    {
      "name": "Example Test",
      "template": "hw2",
      "params": {
        "testName": "example",
        "out": "example.out"
      },
      "output_file": "example.out",
      "expected_output_file": "example.expected"
    },
    {
      "name": "Example Matrix Test",
      "template": "hw2",
      "params": {
        "testName": "exampleMatrix",
        "out": "exampleMatrix.out"
      },
      "output_file": "exampleMatrix.out",
      "expected_output_file": "exampleMatrix.expected"
    },
    {
      "name": "Example MataMvidia Test",
      "template": "hw2",
      "params": {
        "testName": "exampleMataMvidia",
        "out": "exampleMataMvidia.out"
      },
      "output_file": "exampleMataMvidia.out",
      "expected_output_file": "exampleMataMvidia.expected"
    },
    {
      "name": "Constructor Test (Thanks Linoy :))",
      "template": "hw2",
      "params": {
        "testName": "constructorAssignment",
        "out": "constructorAssignment.out"
      },
      "output_file": "constructorAssignment.out",
      "expected_output_file": "constructorAssignment.expected"
    },
    {
      "name": "Invalid Index Test 1 (Thanks Linoy :))",
      "template": "hw2Error",
      "params": {
        "testName": "constructorErrorSize1",
        "out": "constructorErrorSize1.out"
      },
      "output_file": "constructorErrorSize1.out",
      "expected_output_file": "errorSize.expected",
      "run_leaks": false
    },
    {
      "name": "Invalid Index Test 2 (Thanks Linoy :))",
      "template": "hw2Error",
      "params": {
        "testName": "constructorErrorSize2",
        "out": "constructorErrorSize2.out"
      },
      "output_file": "constructorErrorSize2.out",
      "expected_output_file": "errorSize.expected",
      "run_leaks": false
    },
    {
      "name": "Invalid Index Test 3 (Thanks Linoy :))",
      "template": "hw2Error",
      "params": {
        "testName": "constructorErrorSize3",
        "out": "constructorErrorSize3.out"
      },
      "output_file": "constructorErrorSize3.out",
      "expected_output_file": "errorSize.expected",
      "run_leaks": false
    },
    {
      "name": "Invalid Index Test 4 (Thanks Linoy :))",
      "template": "hw2Error",
      "params": {
        "testName": "constructorErrorSize4",
        "out": "constructorErrorSize4.out"
      },
      "output_file": "constructorErrorSize4.out",
      "expected_output_file": "errorSize.expected",
      "run_leaks": false
    },
    {
      "name": "Mata Mvidia End to End (Thanks Linoy :))",
      "template": "hw2",
      "params": {
        "testName": "mataMvidiaE2E",
        "out": "mataMvidiaE2E.out"
      },
      "output_file": "mataMvidiaE2E.out",
      "expected_output_file": "mataMvidiaE2E.expected"
    },
    {
      "name": "Matrix Initialization Test (Thanks Nir :))",
      "template": "hw2",
      "params": {
        "testName": "matrixInit",
        "out": "matrixInit.out"
      },
      "output_file": "matrixInit.out",
      "expected_output_file": "matrixInit.expected"
    },
    {
      "name": "Mata Mvidia Operations Test (Thanks Nir :))",
      "template": "hw2",
      "params": {
        "testName": "mataMvidiaOperations",
        "out": "mataMvidiaOperations.out"
      },
      "output_file": "mataMvidiaOperations.out",
      "expected_output_file": "mataMvidiaOperations.expected"
    },
    {
      "name": "Matrix Transformations Test (Thanks Nir :))",
      "template": "hw2",
      "params": {
        "testName": "matrixTransformations",
        "out": "matrixTransformations.out"
      },
      "output_file": "matrixTransformations.out",
      "expected_output_file": "matrixTransformations.expected"
    },
    {
      "name": "Non-Square Matrix Transformations Test (Thanks Nir :))",
      "template": "hw2",
      "params": {
        "testName": "nonSquareMatrixTransformations",
        "out": "nonSquareMatrixTransformations.out"
      },
      "output_file": "nonSquareMatrixTransformations.out",
      "expected_output_file": "nonSquareMatrixTransformations.expected"
    },
    {
      "name": "Matrix Sum is Zero Test",
      "template": "hw2",
      "params": {
        "testName": "additionZeroResult",
        "out": "additionZeroResult.out"
      },
      "output_file": "additionZeroResult.out",
      "expected_output_file": "twoByTwoZeroResult.expected"
    },
    {
      "name": "Matrix Subtraction is Zero Test",
      "template": "hw2",
      "params": {
        "testName": "subZeroResult",
        "out": "subZeroResult.out"
      },
      "output_file": "subZeroResult.out",
      "expected_output_file": "twoByTwoZeroResult.expected"
    },
    {
      "name": "Matrix Multiplication is Zero Test",
      "template": "hw2",
      "params": {
        "testName": "multiplyZeroResult",
        "out": "multiplyZeroResult.out"
      },
      "output_file": "multiplyZeroResult.out",
      "expected_output_file": "multiplyZeroResult.expected"
    },
    {
      "name": "Matrix Scalar Multiplication is Zero Test",
      "template": "hw2",
      "params": {
        "testName": "scalarMultiplyZeroResult",
        "out": "scalarMultiplyZeroResult.out"
      },
      "output_file": "scalarMultiplyZeroResult.out",
      "expected_output_file": "scalarMultiplyZeroResult.expected"
    },
    {
      "name": "Matrix Sum Assignment Multiplication is Zero Test",
      "template": "hw2",
      "params": {
        "testName": "additionAssignmentZeroResult",
        "out": "additionAssignmentZeroResult.out"
      },
      "output_file": "additionAssignmentZeroResult.out",
      "expected_output_file": "twoByTwoZeroResult.expected"
    },
    {
      "name": "Matrix Subtract Assignment Multiplication is Zero Test",
      "template": "hw2",
      "params": {
        "testName": "subAssignmentZeroResult",
        "out": "subAssignmentZeroResult.out"
      },
      "output_file": "subAssignmentZeroResult.out",
      "expected_output_file": "twoByTwoZeroResult.expected"
    },
    {
      "name": "Matrix Multiplication Assignment Multiplication is Zero Test",
      "template": "hw2",
      "params": {
        "testName": "multiplyAssignmentZeroResult",
        "out": "multiplyAssignmentZeroResult.out"
      },
      "output_file": "multiplyAssignmentZeroResult.out",
      "expected_output_file": "multiplyAssignmentZeroResult.expected"
    },
    {
      "name": "Zero Matrix Tests",
      "template": "hw2",
      "params": {
        "testName": "testZeroMatrix",
        "out": "zeroMatrix.out"
      },
      "output_file": "zeroMatrix.out",
      "expected_output_file": "zeroMatrix.expected"
    },
    {
      "name": "Advanced: m += m and m + m Tests",
      "template": "hw2OutAndError",
      "params": {
        "testName": "matrixPlusItself",
        "out": "matrixPlusItself.out"
      },
      "output_file": "matrixPlusItself.out",
      "expected_output_file": "matrixPlusItself.expected"
    },
    {
      "name": "Advanced: m *= m and m * m Tests",
      "template": "hw2OutAndError",
      "params": {
        "testName": "matrixMultiplyItself",
        "out": "matrixMultiplyItself.out"
      },
      "output_file": "matrixMultiplyItself.out",
      "expected_output_file": "matrixMultiplyItself.expected"
    },
    {
      "name": "Test Matamvidia constructor params copied by value",
      "template": "hw2OutAndError",
      "params": {
        "testName": "matamvidiaCopiesCtorParams",
        "out": "matamvidiaCopiesCtorParams.out"
      },
      "output_file": "matamvidiaCopiesCtorParams.out",
      "expected_output_file": "matamvidiaCopiesCtorParams.expected"
    },
        {
      "name": "null matrix det calc",
      "template": "hw2Error",
      "params": {
        "testName": "testDetZero",
        "out": "testDetZero.out"
      },
      "output_file": "testDetZero.out",
      "expected_output_file": "SquareError.expected",
      "run_leaks": false
    },
    {
      "name": "Long Rectangle det calc error",
      "template": "hw2Error",
      "params": {
        "testName": "testDetLongRectangle",
        "out": "testDetLongRectangle.out"
      },
      "output_file": "testDetLongRectangle.out",
      "expected_output_file": "SquareError.expected",
      "run_leaks": false
    },
    {
      "name": "Tall Rectangle det calc error",
      "template": "hw2Error",
      "params": {
        "testName": "testDetTallRectangle",
        "out": "testDetTallRectangle.out"
      },
      "output_file": "testDetTallRectangle.out",
      "expected_output_file": "SquareError.expected",
      "run_leaks": false
    },
    {
      "name": "test Det Five By Five Positive 1",
      "template": "hw2",
      "params": {
        "testName": "testDetFiveByFivePositive1",
        "out": "testDetFiveByFivePositive1.out"
      },
      "output_file": "testDetFiveByFivePositive1.out",
      "expected_output_file": "testDetFiveByFivePositive1.expected"
    },
    {
      "name": "test Det Five By Five Positive 2",
      "template": "hw2",
      "params": {
        "testName": "testDetFiveByFivePositive2",
        "out": "testDetFiveByFivePositive2.out"
      },
      "output_file": "testDetFiveByFivePositive2.out",
      "expected_output_file": "testDetFiveByFivePositive2.expected"
    },
    {
      "name": "test Det Five By Five Negative 1",
      "template": "hw2",
      "params": {
        "testName": "testDetFiveByFiveNegative1",
        "out": "testDetFiveByFiveNegative1.out"
      },
      "output_file": "testDetFiveByFiveNegative1.out",
      "expected_output_file": "testDetFiveByFiveNegative1.expected"
    },
    {
      "name": "test Det Five By Five Negative 2",
      "template": "hw2",
      "params": {
        "testName": "testDetFiveByFiveNegative2",
        "out": "testDetFiveByFiveNegative2.out"
      },
      "output_file": "testDetFiveByFiveNegative2.out",
      "expected_output_file": "testDetFiveByFiveNegative2.expected"
    },
    {
      "name": "test Det Five By Five Zero 1",
      "template": "hw2",
      "params": {
        "testName": "testDetFiveByFiveZero1",
        "out": "testDetFiveByFiveZero1.out"
      },
      "output_file": "testDetFiveByFiveZero1.out",
      "expected_output_file": "testDetFiveByFiveZero1.expected"
    },
    {
      "name": "test Det Five By Five Zero 2",
      "template": "hw2",
      "params": {
        "testName": "testDetFiveByFiveZero2",
        "out": "testDetFiveByFiveZero2.out"
      },
      "output_file": "testDetFiveByFiveZero2.out",
      "expected_output_file": "testDetFiveByFiveZero2.expected"
    },
    {
      "name": "test Det Four By Four Positive 1",
      "template": "hw2",
      "params": {
        "testName": "testDetFourByFourPositive1",
        "out": "testDetFourByFourPositive1.out"
      },
      "output_file": "testDetFourByFourPositive1.out",
      "expected_output_file": "testDetFourByFourPositive1.expected"
    },
    {
      "name": "test Det Four By Four Positive 2",
      "template": "hw2",
      "params": {
        "testName": "testDetFourByFourPositive2",
        "out": "testDetFourByFourPositive2.out"
      },
      "output_file": "testDetFourByFourPositive2.out",
      "expected_output_file": "testDetFourByFourPositive2.expected"
    },
    {
      "name": "test Det Four By Four Negative 1",
      "template": "hw2",
      "params": {
        "testName": "testDetFourByFourNegative1",
        "out": "testDetFourByFourNegative1.out"
      },
      "output_file": "testDetFourByFourNegative1.out",
      "expected_output_file": "testDetFourByFourNegative1.expected"
    },
    {
      "name": "test Det Four By Four Negative 2",
      "template": "hw2",
      "params": {
        "testName": "testDetFourByFourNegative2",
        "out": "testDetFourByFourNegative2.out"
      },
      "output_file": "testDetFourByFourNegative2.out",
      "expected_output_file": "testDetFourByFourNegative2.expected"
    },
    {
      "name": "test Det Four By Four Zero 1",
      "template": "hw2",
      "params": {
        "testName": "testDetFourByFourZero1",
        "out": "testDetFourByFourZero1.out"
      },
      "output_file": "testDetFourByFourZero1.out",
      "expected_output_file": "testDetFourByFourZero1.expected"
    },
    {
      "name": "test Det Four By Four Zero 2",
      "template": "hw2",
      "params": {
        "testName": "testDetFourByFourZero2",
        "out": "testDetFourByFourZero2.out"
      },
      "output_file": "testDetFourByFourZero2.out",
      "expected_output_file": "testDetFourByFourZero2.expected"
    },
    {
      "name": "test Det Three By Three Positive",
      "template": "hw2",
      "params": {
        "testName": "testDetThreeByThreePositive",
        "out": "testDetThreeByThreePositive.out"
      },
      "output_file": "testDetThreeByThreePositive.out",
      "expected_output_file": "testDetThreeByThreePositive.expected"
    },
    {
      "name": "test Det Three By Three Negative",
      "template": "hw2",
      "params": {
        "testName": "testDetThreeByThreeNegative",
        "out": "testDetThreeByThreeNegative.out"
      },
      "output_file": "testDetThreeByThreeNegative.out",
      "expected_output_file": "testDetThreeByThreeNegative.expected"
    },
    {
      "name": "test Det Three By Three Zero",
      "template": "hw2",
      "params": {
        "testName": "testDetThreeByThreeZero",
        "out": "testDetThreeByThreeZero.out"
      },
      "output_file": "testDetThreeByThreeZero.out",
      "expected_output_file": "testDetThreeByThreeZero.expected"
    },
    {
      "name": "test Det Two By Two Positive",
      "template": "hw2",
      "params": {
        "testName": "testDetTwoByTwoPositive",
        "out": "testDetTwoByTwoPositive.out"
      },
      "output_file": "testDetTwoByTwoPositive.out",
      "expected_output_file": "testDetTwoByTwoPositive.expected"
    },
    {
      "name": "test Det Two By Two Negative",
      "template": "hw2",
      "params": {
        "testName": "testDetTwoByTwoNegative",
        "out": "testDetTwoByTwoNegative.out"
      },
      "output_file": "testDetTwoByTwoNegative.out",
      "expected_output_file": "testDetTwoByTwoNegative.expected"
    },
    {
      "name": "test Det Two By Two Zero",
      "template": "hw2",
      "params": {
        "testName": "testDetTwoByTwoZero",
        "out": "testDetTwoByTwoZero.out"
      },
      "output_file": "testDetTwoByTwoZero.out",
      "expected_output_file": "testDetTwoByTwoZero.expected"
    },
    {
      "name": "test Det One By One Positive",
      "template": "hw2",
      "params": {
        "testName": "testDetOneByOnePositive",
        "out": "testDetOneByOnePositive.out"
      },
      "output_file": "testDetOneByOnePositive.out",
      "expected_output_file": "testDetOneByOnePositive.expected"
    },
    {
      "name": "test Det One By One Negative",
      "template": "hw2",
      "params": {
        "testName": "testDetOneByOneNegative",
        "out": "testDetOneByOneNegative.out"
      },
      "output_file": "testDetOneByOneNegative.out",
      "expected_output_file": "testDetOneByOneNegative.expected"
    },
    {
      "name": "test Det One By One Zero",
      "template": "hw2",
      "params": {
        "testName": "testDetOneByOneZero",
        "out": "testDetOneByOneZero.out"
      },
      "output_file": "testDetOneByOneZero.out",
      "expected_output_file": "testDetOneByOneZero.expected"
    },
    {
      "name": "test Det Permutation 1",
      "template": "hw2",
      "params": {
        "testName": "testDetPermutation1",
        "out": "testDetPermutation1.out"
      },
      "output_file": "testDetPermutation1.out",
      "expected_output_file": "testDetPermutation1.expected"
    },
    {
      "name": "test Det Permutation 2",
      "template": "hw2",
      "params": {
        "testName": "testDetPermutation2",
        "out": "testDetPermutation2.out"
      },
      "output_file": "testDetPermutation2.out",
      "expected_output_file": "testDetPermutation2.expected"
    },
    {
      "name": "test Det Identity",
      "template": "hw2",
      "params": {
        "testName": "testDetIdentity",
        "out": "testDetIdentity.out"
      },
      "output_file": "testDetIdentity.out",
      "expected_output_file": "testDetIdentity.expected"
    },
    {
      "name": "test Det Diagonal",
      "template": "hw2",
      "params": {
        "testName": "testDetDiagonal",
        "out": "testDetDiagonal.out"
      },
      "output_file": "testDetDiagonal.out",
      "expected_output_file": "testDetDiagonal.expected"
    },
    {
      "name": "test Det Linearly Dependent Five By Five",
      "template": "hw2",
      "params": {
        "testName": "testDetLinearlyDependentFiveByFive",
        "out": "testDetLinearlyDependentFiveByFive.out"
      },
      "output_file": "testDetLinearlyDependentFiveByFive.out",
      "expected_output_file": "testDetLinearlyDependentFiveByFive.expected"
    },
    {
      "name": "test Det All Zero Five By Five",
      "template": "hw2",
      "params": {
        "testName": "testDetAllZeroFiveByFive",
        "out": "testDetAllZeroFiveByFive.out"
      },
      "output_file": "testDetAllZeroFiveByFive.out",
      "expected_output_file": "testDetAllZeroFiveByFive.expected"
    }
  ]
}
